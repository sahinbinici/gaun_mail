# Server configuration
# Tomcat deployment için port ayarı (embedded Tomcat için)
# External Tomcat kullanıyorsanız bu ayar göz ardı edilir
server.port=${SERVER_PORT:8083}
# Context path - WAR dosya adı ile eşleşmeli
server.servlet.context-path=/ProlizWebServices

# Logging Configuration
# PRODUCTION'da TRACE level'ları INFO/WARN yapmalısınız!
logging.level.com.prolizwebservices=${LOG_LEVEL_APP:INFO}
logging.level.com.prolizwebservices.client=${LOG_LEVEL_CLIENT:TRACE}
logging.level.com.prolizwebservices.filter=${LOG_LEVEL_FILTER:INFO}
logging.level.org.springframework.web=${LOG_LEVEL_WEB:WARN}
logging.level.org.apache.http=${LOG_LEVEL_HTTP:WARN}
logging.level.root=WARN

# Log pattern
logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss} - %msg%n
logging.pattern.file=%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n

# Log file configuration
# Production sunucuda mutlak path kullan
logging.file.name=${LOG_FILE_PATH:/opt/proliz/logs/proliz-web-services.log}
logging.file.max-size=10MB
logging.file.max-history=30

# Connection timeout settings
spring.mvc.async.request-timeout=30000

# SOAP Service Configuration
# Web servisi için kimlik doğrulama ayarları (Environment Variables'dan alınır)
# Production'da mutlaka environment variables kullanın!
soap.service.username=ProLmsGan
soap.service.password=-2020+Pro*Gan#

# Web servisi bağlantı ayarları
soap.service.url=${SOAP_SERVICE_URL:https://obs.gantep.edu.tr/proliz_obs_lms_miner/proliz_obs_lms_miner.asmx}
soap.service.timeout.connect=${SOAP_TIMEOUT_CONNECT:10000}
soap.service.timeout.read=${SOAP_TIMEOUT_READ:30000}
soap.service.retry.enabled=${SOAP_RETRY_ENABLED:true}
soap.service.retry.max-attempts=${SOAP_RETRY_MAX:3}

# Cache Performans Ayarları - YENİ STRATELJİ: PROGRESSIVE LOADING
# Hızlı startup + Arka plan yükleme
# Startup'ta sadece 100 ders yüklenir (hızlı başlatma)
cache.preload.initial-courses=${CACHE_INITIAL:100}
# Arka plan yükleme aktif
cache.progressive.enabled=${CACHE_PROGRESSIVE:true}
# Her batch'te 50 ders
cache.progressive.batch-size=${CACHE_BATCH_SIZE:50}
# 5 dakikada bir batch çalışır
cache.progressive.interval-minutes=${CACHE_INTERVAL:5}
# 30ms rate limit (hızlı batch için)
cache.progressive.rate-limit-ms=${CACHE_RATE_LIMIT:30}
# Batch başına maksimum hata sayısı
cache.progressive.max-errors=${CACHE_MAX_ERRORS:20}

# Async/Paralel İşlem Ayarları
# SOAP çağrıları için thread pool ayarları (Production için azaltıldı)
async.soap.core-pool-size=${ASYNC_SOAP_CORE:20}
async.soap.max-pool-size=${ASYNC_SOAP_MAX:60}
async.soap.queue-capacity=${ASYNC_SOAP_QUEUE:200}
async.soap.keep-alive-seconds=${ASYNC_SOAP_KEEPALIVE:60}

# Ultra-Fast Parallel Loader Ayarları (Production için azaltıldı)
parallel.loader.max-concurrent=${PARALLEL_MAX_CONCURRENT:60}
parallel.loader.batch-size=${PARALLEL_BATCH_SIZE:40}
parallel.loader.rate-limit-ms=${PARALLEL_RATE_LIMIT:10}
parallel.loader.timeout-seconds=${PARALLEL_TIMEOUT:45}
parallel.loader.max-retries=${PARALLEL_MAX_RETRIES:2}

# SSL/TLS Güvenlik Ayarları
server.ssl.enabled=false
server.ssl.key-store-type=PKCS12
# server.ssl.key-store=classpath:keystore.p12
# server.ssl.key-store-password=changeit
# server.ssl.key-alias=proliz

# SpringDoc OpenAPI (Swagger) Configuration
springdoc.api-docs.path=/api-docs
springdoc.swagger-ui.path=/swagger-ui.html
springdoc.swagger-ui.tryItOutEnabled=true
springdoc.swagger-ui.operationsSorter=method
springdoc.swagger-ui.tagsSorter=alpha
springdoc.swagger-ui.filter=true
springdoc.swagger-ui.displayRequestDuration=true
springdoc.swagger-ui.defaultModelsExpandDepth=1
springdoc.swagger-ui.defaultModelExpandDepth=1
springdoc.swagger-ui.displayOperationId=false

# Swagger CORS Support
springdoc.swagger-ui.csrf.enabled=false
springdoc.swagger-ui.use-root-path=false

# Show all endpoints in single view - no grouping
# springdoc.group-configs disabled to show all endpoints

# Content Negotiation - Fix for Swagger XML/JSON issue
spring.mvc.contentnegotiation.favor-parameter=false
spring.mvc.contentnegotiation.favor-path-extension=false
spring.mvc.contentnegotiation.media-types.xml=application/xml
spring.mvc.contentnegotiation.media-types.json=application/json

# ============================================
# HYBRID CACHE CONFIGURATION (Redis + Disk + Database)
# ============================================

# Redis Configuration
# Production sunucu: localhost (aynı sunucuda ise)
spring.data.redis.host=${REDIS_HOST:localhost}
spring.data.redis.port=${REDIS_PORT:6379}
spring.data.redis.password=${REDIS_PASSWORD:}
spring.data.redis.timeout=${REDIS_TIMEOUT:60000}
spring.data.redis.jedis.pool.max-active=20
spring.data.redis.jedis.pool.max-idle=10
spring.data.redis.jedis.pool.min-idle=5

# Cache Strategy Configuration
cache.strategy.redis.enabled=${CACHE_REDIS_ENABLED:true}
cache.strategy.disk.enabled=${CACHE_DISK_ENABLED:true}
cache.strategy.database.enabled=${CACHE_DB_ENABLED:true}

# Cache TTL Settings (in seconds)
cache.ttl.soap-response=${CACHE_TTL_SOAP:86400}
cache.ttl.ders-list=${CACHE_TTL_DERS:3600}
cache.ttl.ogrenci-list=${CACHE_TTL_OGRENCI:1800}
cache.ttl.ogretim-elemani=${CACHE_TTL_OGRETIM:7200}

# Disk Cache Configuration
# Production sunucuda mutlak path kullan
cache.disk.directory=${CACHE_DISK_DIR:/opt/proliz/cache}
cache.disk.max-size-mb=${CACHE_DISK_MAX_SIZE:500}

# Database Configuration (MariaDB for production, H2 for development)
# MariaDB Configuration (default)
# Production sunucu: localhost (aynı sunucuda ise)
spring.datasource.url=${DATABASE_URL:jdbc:mariadb://localhost:3306/proliz_cache?useSSL=false&serverTimezone=Europe/Istanbul&characterEncoding=UTF-8}
spring.datasource.driverClassName=${DATABASE_DRIVER:org.mariadb.jdbc.Driver}
spring.datasource.username=${DATABASE_USERNAME:root}
spring.datasource.password=${DATABASE_PASSWORD:sahinbey_}

# MySQL Configuration (alternative - uncomment if using MySQL instead of MariaDB)
#spring.datasource.url=${DATABASE_URL:jdbc:mysql://localhost:3306/proliz_cache?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=Europe/Istanbul&characterEncoding=UTF-8}
#spring.datasource.driverClassName=${DATABASE_DRIVER:com.mysql.cj.jdbc.Driver}

# H2 Configuration (comment out when using MySQL)
#spring.datasource.url=${DATABASE_URL:jdbc:h2:file:./data/proliz_cache;AUTO_SERVER=TRUE}
#spring.datasource.driverClassName=${DATABASE_DRIVER:org.h2.Driver}
#spring.datasource.username=${DATABASE_USERNAME:sa}
#spring.datasource.password=${DATABASE_PASSWORD:}

# JPA Configuration
spring.jpa.hibernate.ddl-auto=${JPA_DDL_AUTO:update}
spring.jpa.show-sql=${JPA_SHOW_SQL:false}
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.dialect=${JPA_DIALECT:org.hibernate.dialect.MariaDBDialect}
spring.jpa.properties.hibernate.jdbc.batch_size=20
spring.jpa.properties.hibernate.order_inserts=true
spring.jpa.properties.hibernate.order_updates=true

# MariaDB/MySQL specific optimizations
spring.jpa.properties.hibernate.jdbc.fetch_size=50
spring.jpa.properties.hibernate.connection.provider_disables_autocommit=true
spring.jpa.properties.hibernate.query.in_clause_parameter_padding=true

# Connection Pool Configuration (HikariCP)
# Production için optimize edilmiş ayarlar
spring.datasource.hikari.maximum-pool-size=${HIKARI_MAX_POOL:20}
spring.datasource.hikari.minimum-idle=${HIKARI_MIN_IDLE:5}
spring.datasource.hikari.connection-timeout=${HIKARI_CONN_TIMEOUT:20000}
spring.datasource.hikari.idle-timeout=${HIKARI_IDLE_TIMEOUT:300000}
spring.datasource.hikari.max-lifetime=${HIKARI_MAX_LIFETIME:1200000}
spring.datasource.hikari.leak-detection-threshold=${HIKARI_LEAK_THRESHOLD:60000}
spring.datasource.hikari.validation-timeout=${HIKARI_VALIDATION_TIMEOUT:5000}
# Thread starvation uyarısını azaltmak için
spring.datasource.hikari.keepalive-time=${HIKARI_KEEPALIVE:300000}

# H2 Console (Development only - disable for production)
spring.h2.console.enabled=${H2_CONSOLE_ENABLED:false}
spring.h2.console.path=/h2-console

# Cache Refresh Strategy
cache.refresh.auto-enabled=${CACHE_AUTO_REFRESH:true}
cache.refresh.cron=${CACHE_REFRESH_CRON:0 0 2 * * ?}
cache.refresh.on-startup=${CACHE_REFRESH_STARTUP:true}
